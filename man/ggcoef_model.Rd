% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggcoef_model.R
\name{ggcoef_model}
\alias{ggcoef_model}
\alias{ggcoef_compare}
\alias{ggcoef_multinom}
\alias{ggcoef_data}
\alias{ggcoef_plot}
\title{Plot model coefficients}
\usage{
ggcoef_model(
  model,
  tidy_fun = broom::tidy,
  conf.int = TRUE,
  conf.level = 0.95,
  exponentiate = TRUE,
  variable_labels = NULL,
  term_labels = NULL,
  add_reference_rows = TRUE,
  no_reference_row = NULL,
  intercept = FALSE,
  keep = NULL,
  drop = NULL,
  significance = 0.05,
  significance_labels = NULL,
  show_p_values = TRUE,
  signif_stars = TRUE,
  return_data = FALSE,
  ...
)

ggcoef_compare(
  models,
  type = c("dodged", "faceted"),
  tidy_fun = broom::tidy,
  conf.int = TRUE,
  conf.level = 0.95,
  exponentiate = TRUE,
  variable_labels = NULL,
  term_labels = NULL,
  add_reference_rows = TRUE,
  no_reference_row = NULL,
  intercept = FALSE,
  keep = NULL,
  drop = NULL,
  significance = 0.05,
  significance_labels = NULL,
  return_data = FALSE,
  ...
)

ggcoef_multinom(
  model,
  type = c("dodged", "faceted"),
  y.level_label = NULL,
  tidy_fun = broom::tidy,
  conf.int = TRUE,
  conf.level = 0.95,
  exponentiate = TRUE,
  variable_labels = NULL,
  term_labels = NULL,
  add_reference_rows = TRUE,
  no_reference_row = NULL,
  intercept = FALSE,
  keep = NULL,
  drop = NULL,
  significance = 0.05,
  significance_labels = NULL,
  show_p_values = TRUE,
  signif_stars = TRUE,
  return_data = FALSE,
  ...
)

ggcoef_data(
  model,
  tidy_fun = broom::tidy,
  conf.int = TRUE,
  conf.level = 0.95,
  exponentiate = TRUE,
  variable_labels = NULL,
  term_labels = NULL,
  add_reference_rows = TRUE,
  no_reference_row = NULL,
  intercept = FALSE,
  keep = NULL,
  drop = NULL,
  significance = 0.05,
  significance_labels = NULL
)

ggcoef_plot(
  data,
  exponentiate = FALSE,
  point_size = 2,
  point_stroke = 2,
  point_fill = "white",
  colour = NULL,
  colour_guide = TRUE,
  colour_lab = "",
  shape = "significance",
  shape_values = c(16, 21),
  shape_guide = TRUE,
  shape_lab = "",
  errorbar = TRUE,
  errorbar_height = 0.1,
  errorbar_coloured = FALSE,
  stripped_rows = TRUE,
  strips_odd = "#11111111",
  strips_even = "#00000000",
  vline = TRUE,
  vline_colour = "grey50",
  dodged = FALSE,
  dodged_width = 0.8,
  facet_col = NULL
)
}
\arguments{
\item{model}{a regression model object}

\item{tidy_fun}{option to specify a custom tidier function}

\item{conf.int}{should confidence intervals be computed? (see \code{\link[broom:reexports]{broom::tidy()}})}

\item{conf.level}{the confidence level to use for the confidence
interval if `conf.int = TRUE`; must be strictly greater than 0
and less than 1; defaults to 0.95, which corresponds to a 95
percent confidence interval}

\item{exponentiate}{if `TRUE` a logarithmic scale will be used for x-axis}

\item{variable_labels}{a named list or a named vector of custom variable labels}

\item{term_labels}{a named list or a named vector of custom term labels}

\item{add_reference_rows}{should reference rows be added?}

\item{no_reference_row}{a vector indicating the name of variables
for those no reference row should be added, when \code{add_reference_rows = TRUE}}

\item{intercept}{should the intercept(s) be included?}

\item{keep}{variables to keep}

\item{drop}{variables to drop}

\item{significance}{level (between 0 and 1) below which a
coefficient is consider to be significantly different from 0
(or 1 if `exponentiate = TRUE`), `NULL` for not highlighting
such coefficients}

\item{significance_labels}{optional vector with custom labels
for significance variable}

\item{show_p_values}{if `TRUE`, add p-value to labels}

\item{signif_stars}{if `TRUE`, add significant stars to labels}

\item{return_data}{if `TRUE`, will return the data.frame used for plotting instead of the plot}

\item{...}{parameters passed to [ggcoef_plot()]}

\item{models}{named list of models}

\item{type}{a dodged plot or a facetted plot?}

\item{y.level_label}{an optional named vector for labelling `y.level` (see examples)}

\item{data}{a data frame containing data to be plotted, typically the output of [ggcoef_data()]}

\item{point_size}{size of the points}

\item{point_stroke}{thickness of the points}

\item{point_fill}{fill colour for the points}

\item{colour}{optional variable name to be mapped to colour aesthetic}

\item{colour_guide}{should colour guide be displayed in the legend?}

\item{colour_lab}{label of the colour aesthetic in the legend}

\item{shape}{optional variable name to be mapped to the shape aesthetic}

\item{shape_values}{values of the different shapes to use in [ggplot2::scale_shape_manual()]}

\item{shape_guide}{should shape guide be displayed in the legend?}

\item{shape_lab}{label of the shape aesthetic in the legend}

\item{errorbar}{should error bars be plotted?}

\item{errorbar_height}{height of error bars}

\item{errorbar_coloured}{should error bars be coloured as the points?}

\item{stripped_rows}{should stripped rows be displayed in the background?}

\item{strips_odd}{color of the odd rows}

\item{strips_even}{color of the even rows}

\item{vline}{should a vertical line de drawn at 0 (or 1 if `exponentiate = TRUE`)?}

\item{vline_colour}{colour of vertical line}

\item{dodged}{should points be dodged (according to the colour aesthetic)?}

\item{dodged_width}{width value for [ggplot2::position_dodge()]}

\item{facet_col}{optional variable name to be used for column facets}
}
\description{
Redesign of [GGally::ggcoef()] based on [broom.helpers].

[ggcoef_multinom()] is a variation of [ggcoef_model()] adapted to multinomial
logistic regressions performed with [nnet::multinom()].
[ggcoef_multinom()] works only with the dev version of `gtsummary`.
}
\examples{
# Small function to display plots only if it's interactive
p_ <- GGally::print_if_interactive

data(trial, package = "gtsummary")
trial$high_marker <- factor(trial$marker > 1, label = c("low", "high"))
attr(trial$high_marker, "label") <- "Marker level"
mod <- glm(response ~ age + stage + grade + high_marker, trial, family = binomial(link = "logit"))
p_(ggcoef_model(mod))
p_(ggcoef_model(mod, exponentiate = TRUE))
p_(ggcoef_model(mod, exponentiate = TRUE, variable_labels = c(age = "Age in years", stage = "Stage of the disease")))
p_(ggcoef_model(mod, exponentiate = TRUE, no_reference_row = "high_marker", intercept = TRUE))
p_(ggcoef_model(mod, exponentiate = TRUE, keep = c("stage", "age")))
p_(ggcoef_model(mod, significance = .10, conf.level = .9, signif_stars = FALSE, show_p_values = FALSE))
p_(ggcoef_model(mod, exponentiate = TRUE, colour = NULL, stripped_rows = FALSE, signif_stars = FALSE))
p_(ggcoef_model(mod, exponentiate = TRUE, conf.int = FALSE))

mod <- glm(response ~ stage:age + grade:stage, trial, family = binomial(link = "logit"))
p_(ggcoef_model(mod, exponentiate = TRUE))

if (require(survival)) {
  test <- list(time = c(4,3,1,1,2,2,3),
                status = c(1,1,1,0,1,1,0),
                x = c(0,2,1,1,1,0,0),
                sex = c("f", "f", "f", "f", "m", "m", "m"))
  mod <- coxph(Surv(time, status) ~ x + sex, test)
  p_(ggcoef_model(mod, exponentiate = TRUE))
}

# Comparison of several models
mod1 <- glm(response ~ age + stage + grade + high_marker, trial, family = binomial())
mod2 <- step(mod1, trace = 0)
mod3 <- glm(response ~ high_marker * stage, trial, family = binomial())
models <- list("Full model" = mod1, "Simplified model" = mod2, "With interaction" = mod3)

p_(ggcoef_compare(models, exponentiate = TRUE))
p_(ggcoef_compare(models, exponentiate = TRUE, type = "faceted"))

# you can reverse the vertical position of the point by using a negative value
# for dodged_width (but it will produce some warnings)
\dontrun{
  p_(ggcoef_compare(models, exponentiate = TRUE, dodged_width = -.9))
}

# specific function for multinom models
data(tips, package = "reshape")
library(nnet)
mod <- multinom(day ~ total_bill + tip + sex + smoker, data = tips)
p_(ggcoef_multinom(mod))
p_(ggcoef_multinom(mod, y.level = c(Thur = "Thursday", Sat = "Saturday", Sun = "Sunday")))
p_(ggcoef_multinom(mod, type = "faceted"))
p_(ggcoef_multinom(mod, type = "faceted", y.level = c(Thur = "Thursday", Sat = "Saturday", Sun = "Sunday")))
}
