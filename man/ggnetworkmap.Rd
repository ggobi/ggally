% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/ggnetworkmap.R
\name{ggnetworkmap}
\alias{ggnetworkmap}
\title{ggnetworkmap - Plot a network with ggplot2 suitable for overlay on a ggmap:: map ggplot, or other ggplot}
\usage{
ggnetworkmap(gg, data, size = 3, alpha = 0.75, weight, node.group,
  node.color = NULL, node.alpha = NULL, ring.group, segment.alpha = NULL,
  segment.color = "grey", great.circles = FALSE, segment.size = 0.25,
  arrow.size = 0, label.nodes = FALSE, label.size = size/2, ...)
}
\arguments{
\item{gg}{an object of class \code{ggplot}.}

\item{data}{an object of class \code{igraph} or \code{network}. If the object is of class \code{igraph}, the \link[intergraph:asNetwork]{intergraph} package is used to convert it to class \code{network}.}

\item{size}{size of the network nodes. Defaults to 3. If the nodes are weighted, their area is proportionally scaled up to the size set by \code{size}.}

\item{alpha}{a level of transparency for nodes, vertices and arrows. Defaults to 0.75.}

\item{weight}{if present, the unquoted name of a vertex attribute in \code{data}.  Otherwise nodes are unweighted.}

\item{node.group}{\code{NULL}, the default, or the unquoted name of a vertex attribute that will be used to determine the color of each node.}

\item{node.color}{If \code{node.group} is null, a character string specifying a color.}

\item{node.alpha}{transparency of the nodes. Inherits from \code{alpha}.}

\item{ring.group}{if not \code{NULL}, the default, the unquoted name of a vertex attribute that will be used to determine the color of each node border.}

\item{segment.alpha}{transparency of the vertex links. Inherits from \code{alpha}}

\item{segment.color}{color of the vertex links. Defaults to \code{"grey"}.}

\item{great.circles}{whether to draw edges as great circles using the \code{geosphere} package.  Defaults to \code{FALSE}}

\item{segment.size}{size of the vertex links, as a vector of values or as a single value. Defaults to 0.25.}

\item{arrow.size}{size of the vertex arrows for directed network plotting, in centimeters. Defaults to 0.}

\item{label.nodes}{label nodes with their vertex names attribute. If set to \code{TRUE}, all nodes are labelled. Also accepts a vector of character strings to match with vertex names.}

\item{label.size}{size of the labels.  Defaults to \code{size / 2}.}

\item{...}{other arguments supplied to geom_text for the node labels. Arguments pertaining to the title or other items can be achieved through ggplot2 methods.}
}
\description{
This is a descendent of the original \code{ggnet} function.  \code{ggnet} added the innovation of plotting the network geographically.
However, \code{ggnet} needed to be the first object in the ggplot chain.  \code{ggnetworkmap} does not.  If passed a \code{ggplot} object as its first argument,
such as output from \code{ggmap}, \code{ggneworkmap} will plot on top of that chart, looking for vertex attributes \code{lon} and \code{lat} as coordinates.
Otherwise, \code{ggnetworkmap} will generate coordinates using the Fruchterman-Reingold algorithm.
}
\details{
This is a function for plotting graphs generated by \code{network} or \code{igraph} in a more flexible and elegant manner than permitted by ggnet.  The function does not need to be the first plot in the ggplot chain, so the graph can be plotted on top of a map or other chart.  Segments can be straight lines, or plotted as great circles.  Note that the great circles feature can produce odd results with arrows and with vertices beyond the plot edges; this is a gglot2 limitation and cannot yet be fixed.  Nodes can have two color schemes, which are then plotted as the center and ring around the node.  The color schemes are selected by adding scale_fill_ or scale_color_ just like any other ggplot2 plot. If there are no rings, scale_color sets the color of the nodes.  If there are rings, scale_color sets the color of the rings, and scale_fill sets the color of the centers.  Note that additional arguments in the ... are passed to geom_text for plotting labels.
}
\examples{
if (require(ggplot2) && require(igraph) && require(maps)) {

# Example showing great circles on a simple map

airports <- read.csv("http://datasets.flowingdata.com/tuts/maparcs/airports.csv", header=TRUE)
airports$lon <- airports$long

set.seed(124)
flights <- data.frame(origin =
     sample(airports[200:400,]$iata, 200, replace = TRUE),
     destination = sample(airports[200:400,]$iata, 200,
                                 replace = TRUE))
graph <- graph.data.frame(flights, airports, directed = TRUE)
graph <- graph - V(graph)[igraph::degree(graph, mode = "total") < 2]
V(graph)$degree <- igraph::degree(graph, mode = "total")
V(graph)$mygroup <- sample(1:4, length(V(graph)), replace = TRUE)
usa <- ggplot(map_data("usa"), aes(x = long, y = lat)) +
 geom_polygon(aes(group = group), color = "grey65",
              fill = "#f9f9f9", size = 0.2)
ggnetworkmap(usa, graph, size = 2, great.circles = TRUE,
              node.group = mygroup,
            ring.group = degree,
            segment.color = "cornflowerblue",
            weight = degree)

# Exploring a community of spam-bots found on twitter
data(twitter_spam_community)
world <- fortify(map("world", plot = FALSE, fill = TRUE))
gp <- ggplot(world, aes(x = long, y = lat)) +
geom_polygon(aes(group = group), color = "grey65",
            fill = "#f9f9f9", size = 0.2)
# View global structure
ggnetworkmap(gp, twitter_spam_community)

# Domestic distribution
ggnetworkmap(data=twitter_spam_community) + xlim(-130,-60)

# Topology
ggnetworkmap(data=twitter_spam_community, arrow.size = 0.5)
# This graph was located by setting node.group to the results of a community detection function
# Note that igraph:: does not currently allow the use of factors as vertex attributes
## (feature forthcoming)
V(twitter_spam_community)$indegree <- igraph::degree(twitter_spam_community, mode = "in")
V(twitter_spam_community)$outdegree <- igraph::degree(twitter_spam_community, mode = "out")

ggnetworkmap(data=twitter_spam_community,
           arrow.size = 0.5,
           node.group = indegree,
           ring.group = outdegree, size = 4) +
           scale_fill_continuous("Indegree", high = "red", low = "yellow") +
           labs(color = "Outdegree")

# This graph is pre-loaded with some vertex attributes associated with the screen names
ggnetworkmap(data=twitter_spam_community,
           arrow.size = 0.5,
           node.group = followersCount,
           ring.group = friendsCount,
           size = 4,
           weight = indegree,
           label.nodes = TRUE, vjust = -1.5) +
   scale_fill_continuous("followersCount", high = "red", low = "yellow") +
   labs(color = "friendsCount") +
   scale_color_continuous(low = "lightgreen", high = "darkgreen")
}
}
\author{
Amos Elberg \email{amos.elberg@gmail.com}. Original by Moritz Marbach \email{mmarbach@mail.uni-mannheim.de}, Francois Briatte \email{f.briatte@gmail.com}
}

